const fs = require("fs").promises;
const path = require("path");
const glob = require("fast-glob");
const { optimize } = require("svgo");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const INPUT_DIR = path.join(__dirname, "../raw/img");
const OUTPUT_DIR = path.join(__dirname, "../src/app/img");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SVGO
const svgoConfig = {
  plugins: [
    "removeDoctype",
    "removeXMLProcInst",
    "removeComments",
    "removeMetadata",
    "removeTitle",
    "removeDesc",
    "removeUselessDefs",
    "removeEditorsNSData",
    "removeEmptyAttrs",
    "removeHiddenElems",
    "removeEmptyText",
    "removeEmptyContainers",
    "cleanupEnableBackground",
    "convertStyleToAttrs",
    "convertColors",
    "convertPathData",
    "convertTransform",
    "removeUnknownsAndDefaults",
    "removeNonInheritableGroupAttrs",
    "removeUselessStrokeAndFill",
    "cleanupEnableBackground",
    "removeRasterImages",
    "removeUselessDefs",
    "cleanupNumericValues",
    "cleanupListOfValues",
    "convertColors",
    "removeUnknownsAndDefaults",
    "removeNonInheritableGroupAttrs",
    "removeUselessStrokeAndFill",
    "cleanupEnableBackground",
    "removeHiddenElems",
    "removeEmptyText",
    "convertShapeToPath",
    "convertEllipseToCircle",
    "moveElemsAttrsToGroup",
    "moveGroupAttrsToElems",
    "collapseGroups",
    "convertPathData",
    "convertTransform",
    "removeEmptyAttrs",
    "removeEmptyContainers",
    "mergePaths",
    "removeUnusedNS",
    "sortDefsChildren",
    "removeTitle",
    "removeDesc",
  ],
  floatPrecision: 2, // 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
};

async function optimizeSVG(inputFile, outputDir, fileName) {
  const baseName = path.basename(fileName, path.extname(fileName));

  console.log(`üìù –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é: ${fileName}`);

  try {
    // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    await fs.mkdir(outputDir, { recursive: true });

    // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    const inputContent = await fs.readFile(inputFile, "utf-8");

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º SVG
    const result = optimize(inputContent, svgoConfig);

    // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    const outputPath = path.join(outputDir, `${baseName}.svg`);
    await fs.writeFile(outputPath, result.data, "utf-8");

    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
    const originalSize = Buffer.byteLength(inputContent, "utf-8");
    const optimizedSize = Buffer.byteLength(result.data, "utf-8");
    const savings = (
      ((originalSize - optimizedSize) / originalSize) *
      100
    ).toFixed(1);

    console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω: ${baseName}.svg`);
    console.log(
      `  üìä –†–∞–∑–º–µ—Ä: ${originalSize} ‚Üí ${optimizedSize} –±–∞–π—Ç (—ç–∫–æ–Ω–æ–º–∏—è: ${savings}%)`
    );

    return {
      success: true,
      originalSize,
      optimizedSize,
      savings: parseFloat(savings),
    };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ${fileName}:`, error.message);
    return { success: false };
  }
}

async function optimizeSVGs() {
  console.log("üîç –ü–æ–∏—Å–∫ SVG —Ñ–∞–π–ª–æ–≤ –≤:", INPUT_DIR);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    await fs.access(INPUT_DIR);

    // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    await fs.mkdir(OUTPUT_DIR, { recursive: true });

    // –ò—â–µ–º –≤—Å–µ SVG —Ñ–∞–π–ª—ã
    const files = await glob(["raw/img/**/*.svg"], {
      absolute: true,
      cwd: process.cwd(),
    });

    console.log("üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:", files.length);

    if (files.length === 0) {
      throw new Error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ SVG —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ raw/img/");
    }

    let processedCount = 0;
    let totalOriginalSize = 0;
    let totalOptimizedSize = 0;
    let totalSavings = 0;

    for (const file of files) {
      const fileName = path.basename(file);
      const relativePath = path.relative(INPUT_DIR, file);
      const outputSubDir = path.dirname(relativePath);
      const outputPath = path.join(OUTPUT_DIR, outputSubDir);

      const result = await optimizeSVG(file, outputPath, fileName);

      if (result.success) {
        processedCount++;
        totalOriginalSize += result.originalSize;
        totalOptimizedSize += result.optimizedSize;
        totalSavings += result.savings;
      }
    }

    const averageSavings = (totalSavings / processedCount).toFixed(1);
    const totalSavingsPercent = (
      ((totalOriginalSize - totalOptimizedSize) / totalOriginalSize) *
      100
    ).toFixed(1);

    console.log("\nüéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedCount}`);
    console.log(
      `üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${(totalOriginalSize / 1024).toFixed(1)}KB ‚Üí ${(
        totalOptimizedSize / 1024
      ).toFixed(1)}KB`
    );
    console.log(`üìä –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${totalSavingsPercent}%`);
    console.log(`üìä –°—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—è –Ω–∞ —Ñ–∞–π–ª: ${averageSavings}%`);
    console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${OUTPUT_DIR}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
    process.exit(1);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  await optimizeSVGs();
}

main();
