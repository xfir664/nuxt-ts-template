const fs = require("fs").promises;
const path = require("path");
const glob = require("fast-glob");
const sharp = require("sharp");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const INPUT_DIR = path.join(__dirname, "../raw/img");
const OUTPUT_DIR = path.join(__dirname, "../src/app/img");
const SUPPORTED_FORMATS = [".jpg", ".jpeg", ".png", ".bmp", ".tiff", ".webp"];
const QUALITY = 80; // –ö–∞—á–µ—Å—Ç–≤–æ WebP (0-100)
const RETINA_SCALES = [1, 2]; // 1x –∏ 2x

async function optimizeImages() {
  console.log("üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤:", INPUT_DIR);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    await fs.access(INPUT_DIR);

    // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    await fs.mkdir(OUTPUT_DIR, { recursive: true });

    // –ò—â–µ–º –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const patterns = SUPPORTED_FORMATS.map((format) => `raw/img/**/*${format}`);
    const files = await glob(patterns, {
      absolute: true,
      cwd: process.cwd(),
    });

    console.log("üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:", files.length);

    if (files.length === 0) {
      throw new Error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ img/");
    }

    let processedCount = 0;
    let totalOptimized = 0;

    for (const file of files) {
      const fileName = path.basename(file, path.extname(file));
      const relativePath = path.relative(INPUT_DIR, file);
      const outputSubDir = path.dirname(relativePath);
      const outputPath = path.join(OUTPUT_DIR, outputSubDir);

      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      await fs.mkdir(outputPath, { recursive: true });

      console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: ${fileName}`);

      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const image = sharp(file);
        const metadata = await image.metadata();

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞ —Ä–µ—Ç–∏–Ω—ã
        for (const scale of RETINA_SCALES) {
          const suffix = scale === 1 ? "@1x" : "@2x";
          const outputFileName = `${fileName}${suffix}.webp`;
          const outputFilePath = path.join(outputPath, outputFileName);

          // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
          const newWidth = Math.round(metadata.width * scale);
          const newHeight = Math.round(metadata.height * scale);

          // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WebP
          await image
            .resize(newWidth, newHeight, {
              fit: "inside",
              withoutEnlargement: true,
              kernel: sharp.kernel.lanczos3,
            })
            .webp({
              quality: QUALITY,
              effort: 6, // –£—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è (0-6)
              nearLossless: false,
              smartSubsample: true,
            })
            .toFile(outputFilePath);

          console.log(
            `  ‚úÖ –°–æ–∑–¥–∞–Ω: ${outputFileName} (${newWidth}x${newHeight})`
          );
          totalOptimized++;
        }

        processedCount++;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${fileName}:`, error.message);
      }
    }

    console.log("\nüéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedCount}`);
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ WebP —Ñ–∞–π–ª–æ–≤: ${totalOptimized}`);
    console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${OUTPUT_DIR}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
    process.exit(1);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  await optimizeImages();
}

main();
