const fs = require("fs").promises;
const path = require("path");
const glob = require("fast-glob");
const ttf2woff = require("ttf2woff");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const INPUT_DIR = path.join(__dirname, "../raw/fonts");
const OUTPUT_DIR = path.join(__dirname, "../src/app/fonts");
const SUPPORTED_FORMATS = [".ttf", ".otf", ".woff", ".woff2", ".eot", ".svg"];

async function convertFont(inputFile, outputDir, fileName) {
  const baseName = path.basename(fileName, path.extname(fileName));
  const ext = path.extname(fileName).toLowerCase();

  console.log(`üìù –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é: ${fileName}`);

  try {
    // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    await fs.mkdir(outputDir, { recursive: true });

    let convertedCount = 0;

    // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    const inputBuffer = await fs.readFile(inputFile);

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ttf2woff2
    let ttf2woff2;
    try {
      ttf2woff2 = (await import("ttf2woff2")).default;
    } catch (error) {
      console.log(`  ‚ö†Ô∏è ttf2woff2 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
      ttf2woff2 = null;
    }

    // –î–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ–∑–¥–∞–µ–º TTF, WOFF –∏ WOFF2
    if (ext === ".ttf") {
      // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ TTF, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
      const ttfBuffer = inputBuffer;

      // –°–æ–∑–¥–∞–µ–º TTF (–∫–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª)
      const ttfPath = path.join(outputDir, `${baseName}.ttf`);
      await fs.writeFile(ttfPath, ttfBuffer);
      console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω: ${baseName}.ttf`);
      convertedCount++;

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WOFF
      try {
        const woffBuffer = ttf2woff(ttfBuffer);
        const woffPath = path.join(outputDir, `${baseName}.woff`);
        await fs.writeFile(woffPath, woffBuffer);
        console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω: ${baseName}.woff`);
        convertedCount++;
      } catch (error) {
        console.log(
          `  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å WOFF –¥–ª—è ${fileName}: ${error.message}`
        );
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WOFF2
      if (ttf2woff2) {
        try {
          const woff2Buffer = ttf2woff2(ttfBuffer);
          const woff2Path = path.join(outputDir, `${baseName}.woff2`);
          await fs.writeFile(woff2Path, woff2Buffer);
          console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω: ${baseName}.woff2`);
          convertedCount++;
        } catch (error) {
          console.log(
            `  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å WOFF2 –¥–ª—è ${fileName}: ${error.message}`
          );
        }
      }
    } else if (ext === ".otf") {
      // –î–ª—è OTF —Ñ–∞–π–ª–æ–≤ - –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ TTF –∏ —Å–æ–∑–¥–∞–µ–º WOFF –∏ WOFF2
      const ttfPath = path.join(outputDir, `${baseName}.ttf`);
      await fs.writeFile(ttfPath, inputBuffer);
      console.log(`  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: ${baseName}.ttf`);
      convertedCount++;

      // –°–æ–∑–¥–∞–µ–º WOFF –∏–∑ TTF
      try {
        const woffBuffer = ttf2woff(inputBuffer);
        const woffPath = path.join(outputDir, `${baseName}.woff`);
        await fs.writeFile(woffPath, woffBuffer);
        console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω: ${baseName}.woff`);
        convertedCount++;
      } catch (error) {
        console.log(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å WOFF –¥–ª—è ${fileName}`);
      }

      // –°–æ–∑–¥–∞–µ–º WOFF2 –∏–∑ TTF
      if (ttf2woff2) {
        try {
          const woff2Buffer = ttf2woff2(inputBuffer);
          const woff2Path = path.join(outputDir, `${baseName}.woff2`);
          await fs.writeFile(woff2Path, woff2Buffer);
          console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω: ${baseName}.woff2`);
          convertedCount++;
        } catch (error) {
          console.log(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å WOFF2 –¥–ª—è ${fileName}`);
        }
      }
    } else if (ext === ".woff") {
      // –î–ª—è WOFF —Ñ–∞–π–ª–æ–≤ - –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å –∏ —Å–æ–∑–¥–∞–µ–º TTF –∏ WOFF2
      const woffPath = path.join(outputDir, `${baseName}.woff`);
      await fs.writeFile(woffPath, inputBuffer);
      console.log(`  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${baseName}.woff`);
      convertedCount++;

      // –°–æ–∑–¥–∞–µ–º TTF (–∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ TTF)
      const ttfPath = path.join(outputDir, `${baseName}.ttf`);
      await fs.writeFile(ttfPath, inputBuffer);
      console.log(`  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: ${baseName}.ttf`);
      convertedCount++;

      // –°–æ–∑–¥–∞–µ–º WOFF2 (–∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ WOFF2)
      const woff2Path = path.join(outputDir, `${baseName}.woff2`);
      await fs.writeFile(woff2Path, inputBuffer);
      console.log(`  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: ${baseName}.woff2`);
      convertedCount++;
    } else if (ext === ".woff2") {
      // –î–ª—è WOFF2 —Ñ–∞–π–ª–æ–≤ - –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å –∏ —Å–æ–∑–¥–∞–µ–º TTF –∏ WOFF
      const woff2Path = path.join(outputDir, `${baseName}.woff2`);
      await fs.writeFile(woff2Path, inputBuffer);
      console.log(`  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${baseName}.woff2`);
      convertedCount++;

      // –°–æ–∑–¥–∞–µ–º TTF (–∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ TTF)
      const ttfPath = path.join(outputDir, `${baseName}.ttf`);
      await fs.writeFile(ttfPath, inputBuffer);
      console.log(`  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: ${baseName}.ttf`);
      convertedCount++;

      // –°–æ–∑–¥–∞–µ–º WOFF (–∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ WOFF)
      const woffPath = path.join(outputDir, `${baseName}.woff`);
      await fs.writeFile(woffPath, inputBuffer);
      console.log(`  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: ${baseName}.woff`);
      convertedCount++;
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (EOT, SVG) - –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ TTF, WOFF –∏ WOFF2
      const ttfPath = path.join(outputDir, `${baseName}.ttf`);
      await fs.writeFile(ttfPath, inputBuffer);
      console.log(`  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: ${baseName}.ttf`);
      convertedCount++;

      const woffPath = path.join(outputDir, `${baseName}.woff`);
      await fs.writeFile(woffPath, inputBuffer);
      console.log(`  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: ${baseName}.woff`);
      convertedCount++;

      const woff2Path = path.join(outputDir, `${baseName}.woff2`);
      await fs.writeFile(woff2Path, inputBuffer);
      console.log(`  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: ${baseName}.woff2`);
      convertedCount++;
    }

    console.log(`  üìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${convertedCount}`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${fileName}:`, error.message);
    return false;
  }
}

async function convertFonts() {
  console.log("üîç –ü–æ–∏—Å–∫ —à—Ä–∏—Ñ—Ç–æ–≤ –≤:", INPUT_DIR);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    await fs.access(INPUT_DIR);

    // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    await fs.mkdir(OUTPUT_DIR, { recursive: true });

    // –ò—â–µ–º –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —à—Ä–∏—Ñ—Ç—ã
    const patterns = SUPPORTED_FORMATS.map(
      (format) => `raw/fonts/**/*${format}`
    );
    const files = await glob(patterns, {
      absolute: true,
      cwd: process.cwd(),
    });

    console.log("üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:", files.length);

    if (files.length === 0) {
      throw new Error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —à—Ä–∏—Ñ—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ raw/fonts/");
    }

    let processedCount = 0;
    let totalConverted = 0;

    for (const file of files) {
      const fileName = path.basename(file);
      const relativePath = path.relative(INPUT_DIR, file);
      const outputSubDir = path.dirname(relativePath);
      const outputPath = path.join(OUTPUT_DIR, outputSubDir);

      const success = await convertFont(file, outputPath, fileName);

      if (success) {
        processedCount++;
        totalConverted += 3; // TTF + WOFF + WOFF2
      }
    }

    console.log("\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedCount}`);
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ —à—Ä–∏—Ñ—Ç–æ–≤: ${totalConverted}`);
    console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${OUTPUT_DIR}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
    process.exit(1);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  await convertFonts();
}

main();
