const fs = require("fs").promises;
const path = require("path");
const glob = require("fast-glob");
const { optimize } = require("svgo");

const ICONS_DIR = path.join(__dirname, "../src/app/icon");
const OUTPUT_DIR = path.join(__dirname, "../public");
const SPRITE_PATH = path.join(OUTPUT_DIR, "sprite.svg");

async function generateSprite() {
  console.log("üîç –ü–æ–∏—Å–∫ SVG —Ñ–∞–π–ª–æ–≤ –≤:", ICONS_DIR);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    await fs.access(ICONS_DIR);
    const files = await glob(["src/app/icon/*.svg"], {
      absolute: true,
      cwd: process.cwd(),
    });

    console.log("üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:", files.length);

    if (files.length === 0) {
      throw new Error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ SVG —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ icon/");
    }

    // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    await fs.mkdir(OUTPUT_DIR, { recursive: true });

    // –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å SVG —Å–ø—Ä–∞–π—Ç
    let spriteContent = `<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">\n`;

    for (const file of files) {
      const fileName = path.basename(file, ".svg");
      console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: ${fileName}`);

      // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
      let content = await fs.readFile(file, "utf-8");

      // –ó–∞–º–µ–Ω—è–µ–º fill –Ω–∞ currentColor
      content = content.replace(/fill="[^"]*"/g, 'fill="currentColor"');

      // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º SVG
      const result = optimize(content, {
        plugins: [
          "removeDoctype",
          "removeXMLProcInst",
          "removeComments",
          "removeMetadata",
          "removeTitle",
          "removeDesc",
          "removeUselessDefs",
          "removeEditorsNSData",
          "removeEmptyAttrs",
          "removeHiddenElems",
          "removeEmptyText",
          "removeEmptyContainers",
          "cleanupEnableBackground",
          "convertStyleToAttrs",
          "convertColors",
          "convertPathData",
        ],
      });

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ SVG –∏ viewBox
      const svgMatch = result.data.match(/<svg[^>]*>(.*)<\/svg>/s);
      if (svgMatch) {
        const innerContent = svgMatch[1];

        // –ò–∑–≤–ª–µ–∫–∞–µ–º viewBox –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ SVG
        const viewBoxMatch = result.data.match(/viewBox="([^"]*)"/);
        const viewBox = viewBoxMatch ? viewBoxMatch[1] : "0 0 24 24";

        spriteContent += `  <symbol id="${fileName}" viewBox="${viewBox}">${innerContent}</symbol>\n`;
      } else {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ ${fileName}`);
      }
    }

    spriteContent += "</svg>";

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ø—Ä–∞–π—Ç
    await fs.writeFile(SPRITE_PATH, spriteContent, "utf-8");
    console.log("‚úÖ SVG —Å–ø—Ä–∞–π—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:", SPRITE_PATH);
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∫–æ–Ω–æ–∫: ${files.length}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
    process.exit(1);
  }
}

generateSprite();
